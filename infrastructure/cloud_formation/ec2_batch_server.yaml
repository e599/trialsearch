AWSTemplateFormatVersion: 2010-09-09

Description:
  Creates an EC2 with dotnet nginx server.

Parameters:
  UserName:
    Type: String
    Default: kgadmin

  SSHPublicKey:
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7i89gJtg/TtfV8w47hoi7gdpqEwxWt54EdY4h8uPesrgZPMW87Y8sSsuvoAu3JNrQaqpjdwiSWMxhMKWMxURzQKr+jr06TDvtPBlLVPXJe/SU1IHgTR9oL9eGJ57od8Y0XQ99DvVamha7Fr+o7f9KpxQktCS38QY6WKP0oyNHrexpXJo+2l1P0ysRi9FNwkoQdlT0KPt/uHZhoNtmlZcUYVCx+XmnQKQpLvFmmIoeqPK4lOe3GOz+0/oK7V4KZJIYTDVY0MOZa8rh9/+Gjucjz9WTDRDCo7LONQUYXfy34OWuXWTVuN7pcPTH7hS8XjcIv4yTufvoavyhM5+H9Vf7 kgadmin

  KeyName:
    Description: Keypair name
    Type: String

  ENV:
    Description: Environment
    Type: String

  ImageId:
    Description: AMI Id
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.


Resources:

  NetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId:
        Fn::ImportValue:
          !Sub "kgraph-${ENV}-Subnet2Id"
      GroupSet:
        - Fn::ImportValue:
            !Sub "kgraph-${ENV}-SG-SSHWEB"
        - Fn::ImportValue:
            !Sub "kgraph-${ENV}-SG-EFS"

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface
          DeviceIndex: '0'

      Tags:
        -
          Key: Name
          Value: !Sub "${ENV}-python-batch"

      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2

      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -xe
              # Add kgadmin user and ssh public key to authorized keys
              adduser ${USERNAME}
              echo ${USERNAME} 'ALL=(ALL) NOPASSWD:ALL'>>/etc/sudoers.d/${USERNAME}
              mkdir /home/${USERNAME}/.ssh
              echo ${SSHKEY} > /home/${USERNAME}/.ssh/authorized_keys

              # key to issue commands to batch server
              cat > /home/${USERNAME}/.ssh/id_rsa << EOF
              -----BEGIN RSA PRIVATE KEY-----
              ...
              -----END RSA PRIVATE KEY-----
              EOF

              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}/.ssh
              chmod 700 /home/${USERNAME}/.ssh
              chmod 600 /home/${USERNAME}/.ssh/id_rsa
              chmod 600 /home/${USERNAME}/.ssh/authorized_keys

              # install required packages
              sudo yum install -y git
              sudo amazon-linux-extras install python3

              curl -O https://bootstrap.pypa.io/get-pip.py
              python3 get-pip.py --user
              echo 'export PATH=$PATH:/home/kgadmin/.local/bin' >> /home/${USERNAME}/.bash_profile

              # app specific env variables
              echo 'export KG_ENV=${ENV}' >> /home/${USERNAME}/.bash_profile
              echo 'export PYTHONPATH=/home/kgadmin/code:/home/kgadmin/code/kg_builder' >> /home/${USERNAME}/.bash_profile

              mkdir -p /home/${USERNAME}/tmp

              # mount EFS
              mkdir -p /home/${USERNAME}/efs
              sudo yum -y install amazon-efs-utils
              sudo mount -t efs ${EFSID}:/ /home/${USERNAME}/efs
              mkdir -p /home/${USERNAME}/efs/data/ct
              mkdir -p /home/${USERNAME}/efs/data/pubmed
              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}
              sudo echo "${EFSID}:/ /home/${USERNAME}/efs efs defaults,_netdev 0 0" >> /etc/fstab

              # Download mesh ontology
              curl -s http://data.bioontology.org/ontologies/MESH/submissions/16/download?apikey=8b5b7825-538d-40e0-9e9e-5ab9274a9aeb -o /home/kgadmin/efs/data/pubmed/mesh.ttl &

              # Schedule kg builder as cron job
              sudo cat > /var/spool/cron/${USERNAME} << EOF
              # run kg builder on the first day of the month at 00:00
              0 0 1 * * python3 /home/kgadmin/code/kg_builder/util/kg_master.py &> /home/kgadmin/kg_builder.log
              EOF

              sudo yum update -y

              # view results of this script at  /var/log/cloud-init-output.log
            - USERNAME: !Ref UserName
              SSHKEY: !Ref SSHPublicKey
              EFSID:
                Fn::ImportValue:
                  !Sub "kgraph-${ENV}-EFSId"

Outputs:
  InstanceId:
    Description: InstanceId of the instance
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "kgraph-${ENV}-ec2-batch-server"
